<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<java>
    <keyWords>
        <entry>
            <key>synchronized</key>
            <value>Specifies critical sections or methods in multithreaded code</value>
        </entry>
        <entry>
            <key>do</key>
            <value>Starts a do-while loop</value>
        </entry>
        <entry>
            <key>float</key>
            <value>A data type that holds a 32-bit floating-point number</value>
        </entry>
        <entry>
            <key>while</key>
            <value>Starts a while loop** The keywords const and goto are reserved, even they are not currently in use.
            </value>
        </entry>
        <entry>
            <key>protected</key>
            <value>An access specifier indicating that a method or variable may only be accessed in the class it’s
                declared in (or a subclass of the class it’s declared in or other classes in the same package)
            </value>
        </entry>
        <entry>
            <key>continue</key>
            <value>Sends control back outside a loop</value>
        </entry>
        <entry>
            <key>else</key>
            <value>Indicates alternative branches in an if statement</value>
        </entry>
        <entry>
            <key>catch</key>
            <value>Catches exceptions generated by try statements</value>
        </entry>
        <entry>
            <key>if</key>
            <value>Tests a true/false expression and branches accordingly</value>
        </entry>
        <entry>
            <key>case</key>
            <value>Used in switch statements to mark blocks of text</value>
        </entry>
        <entry>
            <key>new</key>
            <value>Creates new objects</value>
        </entry>
        <entry>
            <key>package</key>
            <value>Declares a Java package</value>
        </entry>
        <entry>
            <key>static</key>
            <value>Indicates that a variable or method is a class method (rather than being limited to one particular
                object)
            </value>
        </entry>
        <entry>
            <key>void</key>
            <value>Specifies that a method does not have a return value</value>
        </entry>
        <entry>
            <key>byte</key>
            <value>A data type that can hold 8-bit data values</value>
        </entry>
        <entry>
            <key>double</key>
            <value>A data type that can hold 64-bit floating-point numbers</value>
        </entry>
        <entry>
            <key>finally</key>
            <value>Indicates a block of code in a try-catch structure that will always be executed</value>
        </entry>
        <entry>
            <key>this</key>
            <value>Refers to the current object in a method or constructor</value>
        </entry>
        <entry>
            <key>strictfp</key>
            <value>A Java keyword used to restrict the precision and rounding of floating point calculations to ensure
                portability.
            </value>
        </entry>
        <entry>
            <key>throws</key>
            <value>Indicates what exceptions may be thrown by a method</value>
        </entry>
        <entry>
            <key>enum</key>
            <value>A Java keyword used to declare an enumerated type. Enumerations extend the base class.</value>
        </entry>
        <entry>
            <key>extends</key>
            <value>Indicates that a class is derived from another class or interface</value>
        </entry>
        <entry>
            <key>null</key>
            <value>Indicates that a reference does not refer to anything</value>
        </entry>
        <entry>
            <key>transient</key>
            <value>Specifies that a variable is not part of an object’s persistent state</value>
        </entry>
        <entry>
            <key>final</key>
            <value>Indicates that a variable holds a constant value or that a method will not be overridden</value>
        </entry>
        <entry>
            <key>try</key>
            <value>Starts a block of code that will be tested for exceptions</value>
        </entry>
        <entry>
            <key>implements</key>
            <value>Specifies that a class implements an interface</value>
        </entry>
        <entry>
            <key>private</key>
            <value>An access specifier indicating that a method or variable may be accessed only in the class it’s
                declared in
            </value>
        </entry>
        <entry>
            <key>import</key>
            <value>References other classes</value>
        </entry>
        <entry>
            <key>const</key>
            <value>Reserved for future use</value>
        </entry>
        <entry>
            <key>for</key>
            <value>Used to start a for loop</value>
        </entry>
        <entry>
            <key>interface</key>
            <value>Declares an interface</value>
        </entry>
        <entry>
            <key>long</key>
            <value>A data type that holds a 64-bit integer</value>
        </entry>
        <entry>
            <key>switch</key>
            <value>A statement that executes code based on a test value</value>
        </entry>
        <entry>
            <key>default</key>
            <value>Specifies the default block of code in a switch statement</value>
        </entry>
        <entry>
            <key>goto</key>
            <value>Reserved for future use</value>
        </entry>
        <entry>
            <key>public</key>
            <value>An access specifier used for classes, interfaces, methods, and variables indicating that an item is
                accessible throughout the application (or where the class that defines it is accessible)
            </value>
        </entry>
        <entry>
            <key>native</key>
            <value>Specifies that a method is implemented with native (platform-specific) code</value>
        </entry>
        <entry>
            <key>assert</key>
            <value>Assert describes a predicate (a true–false statement) placed in a Java program to indicate that the
                developer thinks that the predicate is always true at that place. If an assertion evaluates to false at
                run-time, an assertion failure results, which typically causes execution to abort.
            </value>
        </entry>
        <entry>
            <key>class</key>
            <value>Declares a new class</value>
        </entry>
        <entry>
            <key>break</key>
            <value>A control statement for breaking out of loops</value>
        </entry>
        <entry>
            <key>volatile</key>
            <value>Indicates that a variable may change asynchronously</value>
        </entry>
        <entry>
            <key>abstract</key>
            <value>Specifies that a class or method will be implemented later, in a subclass</value>
        </entry>
        <entry>
            <key>int</key>
            <value>A data type that can hold a 32-bit signed integer</value>
        </entry>
        <entry>
            <key>instanceof</key>
            <value>Indicates whether an object is an instance of a specific class or implements an interface</value>
        </entry>
        <entry>
            <key>super</key>
            <value>Refers to a class’s base class (used in a method or class constructor)</value>
        </entry>
        <entry>
            <key>boolean</key>
            <value>A data type that can hold True and False values only</value>
        </entry>
        <entry>
            <key>throw</key>
            <value>Creates an exception</value>
        </entry>
        <entry>
            <key>char</key>
            <value>A data type that can hold unsigned 16-bit Unicode characters</value>
        </entry>
        <entry>
            <key>short</key>
            <value>A data type that can hold a 16-bit integer</value>
        </entry>
        <entry>
            <key>return</key>
            <value>Sends control and possibly a return value back from a called method</value>
        </entry>
    </keyWords>
</java>